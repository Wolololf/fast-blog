{
  
    
        "post0": {
            "title": "BC dates in Python - Part 3 - FlexiDate",
            "content": "Recap: The problem . Python&#39;s datetime module has a MINYEAR of 1AD, so we can&#39;t express BC dates like that. We&#39;ll need a different solution. . What are our requirements for a good solution? What functionality are we looking for? . Expressing BC as well as AD dates | Create from string and/or numeric parameters | Print time | Getters | Add/subtract time span and getting time deltas | Get time span delta | Lightweight objects | Useable in pandas? | . 3. Custom made date classes . The best custom-made date class I&#39;ve found is this FlexiDate-inspired one here (which was in turn inspired by this. Someone else wrote some tests for it here that I found useful to work out what the intended usage was. . It&#39;s a custom date format that supports BC dates as well as &quot;imprecise&quot; dates, e.g. you can specify dates as &quot;ca. 1905&quot; or &quot;BC 41?&quot; (to mean in the 410s BC). That sounds pretty exciting for historical research, especially since it still supports sorting. . Now, right off the bat, there are a few issues: . FlexiDate was written in Python 2.x, so the code just doesn&#39;t work because Python itself has changed. unicode has been renamed to str | By default, is parsed day-first which differs from Numpy/Pandas so I brought it in line to parse month-first | dateutil.parser.parser._parse now returns a tuple instead of just the parsing result | . | dateutil.parser has a quirk where if the input is only a two-digit year, it assumes you must be talking about the second half of the 20th century or the first half of the 21st century. This isn&#39;t helpful when dealing with dates from 99BC to 99AD. I feel like I should just replace that parser with custom parsing. | . I&#39;m expecting to find more issues as I keep digging. For now I&#39;ve moved a copy of FlexiDate here for me to work on solving some of the incompatibilities. It&#39;s a work-in-progress, I&#39;ll iron out some of the issues and address some of the TODOs and write another post when it&#39;s ready. I&#39;m tempted to replace the fuzzy parser with regular datetime parsing and then add negative years and uncertainty back on. . I also feel like I need to split FlexiDate into two classes: FlexiDate which supports negative time, and FlexiDateRange which builds on FlexiDate but supports ranges to express uncertainty. For time spans, I&#39;m tempted to split it similarly, so FlexiTimeSpan just has the span as years, months and days, and a FlexiTimeSpanRange which supports a min/max range. . FlexiDate: Creating times BC/AD . # Example code for creating BC and AD times # Via parsing ad_date_fd = fd.parse(&quot;2020-01-02&quot;) print(ad_date_fd) bc_date_fd = fd.parse(&quot;-0400-01-02&quot;) print(bc_date_fd) # Constructor constructor_test = fd.FlexiDate(year=-123, month=5, day=6) print(constructor_test) bc_test = fd.parse(&quot;44 BC&quot;) print(bc_test) bc_test = fd.parse(&quot;144 BC&quot;) print(bc_test) . . 2020-01-02 -0400-01-02 -0123-05-06 -2044 -0144 . FlexiDate: Getters . Getters are easy in FlexiDate since its internal representation has attributes for year, month and day. It doesn&#39;t support time of day, so there are no getters for that. . print(bc_date_fd.year) print(bc_date_fd.month) print(bc_date_fd.day) . . -0400 01 02 . FlexiDate: Time spans . Another major downside to FlexiDate is that it doesn&#39;t support time spans. There is plenty of code on the internet showing how to do time span calculations, I&#39;m sure they could be adjusted to work with FlexiDate. A bigger challenge is the uncertainty aspect: How would subtracting two uncertain dates work? How would you add/subtract uncertain time spans? . I think subtraction of uncertain dates would need to yield a min-max range of time spans, e.g. 202?-199? has a range of [21, 39]. Operating on two ranges would just operate on the min/max, e.g. [21, 39] + [49, 61] = [70, 100] and [49, 61] - [21, 39] = [10, 40]. Combining a FlexiSpan with a FlexiDate would return a FlexiDate if there was no uncertainty, or a tuple of FlexiDates for min/max results based on uncertainty in the date or time span. . I think this could work, but this is just an outline, there&#39;s work to be done. . FlexiDate and Pandas . I propose that FlexiDate would interact with Pandas in a similar way as Numpy&#39;s datetime64 and timedelta64: Custom parsing functions for date columns or multiple date component columns . Conclusion . I love the idea of uncertainty in dates and time spans. .",
            "url": "https://wolololf.github.io/fast-blog/datascience/history/python/time/pandas/2022/01/31/bc_dates_in_python_part_3.html",
            "relUrl": "/datascience/history/python/time/pandas/2022/01/31/bc_dates_in_python_part_3.html",
            "date": " • Jan 31, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "BC dates in Python - Part 2 - Astronomy",
            "content": "Recap: The problem . Python&#39;s datetime module has a MINYEAR of 1AD, so we can&#39;t express BC dates like that. We&#39;ll need a different solution. . What are our requirements for a good solution? What functionality are we looking for? . Expressing BC as well as AD dates | Create from string and/or numeric parameters | Print time | Getters | Add/subtract time span and getting time deltas | Get time span delta | Lightweight objects | Useable in pandas? | . 2. Scientific libraries . It looks like there aren&#39;t a whole lot of historians using Python, but who know who else uses BC dates? Astronomers! There appears to be quite a selection of scientific libraries that deal with dates outside the default Python date range. . Astropy . Astropy&#39;s Time module does the job. It supports a wide variety of time scales, formats and precision that are handy in general, plus some highly astronomy specific functionality such as earth_rotation_angle and light_travel_time. The documentation does a good job explaining how to create and work with Time. . This is an incredibly powerful library, and the documentation rocks. The Time object supports common operations such as creating, modifying and printing dates and time spans. . One downside is that it has a lot of functionality you likely won&#39;t need, so it looks intimidating and confusing at first glance. While it looks like this added functionality would also bloat the object, this isn&#39;t a problem in practice. In addition to taking a string as input, Time also takes an ndarray of strings, and can be interacted with like an array. This means that effectively, you only need to define your time format and such once for the Time object, and the individual times can then be accessed by index. . #Imports from astropy.time import Time, TimeDelta . . Astropy: Creating times BC/AD . One caveat is that we shouldn&#39;t use the standard ISO/ISOT format, e.g. 2020-01-02T03:04:05. The ISO format only works for AD dates! Instead, we should use the FITS format, e.g. -00400-01-02T03:04:05. FITS is an extension to the ISO format that expands the year range to five digits, and supports BC dates. Be aware that for negative dates, you need to pad it out with leading zeroes, or you&#39;ll get a parsing exception! . Another limitation is that despite using 5 digits, you can&#39;t actually represent dates before 4799 BC (so slightly before the start of the Julian calendar). For a discussion about why this is limitation exists, see here. . # Example code for creating BC and AD times ad_date_astro = Time(&quot;2020-01-01T01:23:45&quot;, format=&#39;fits&#39;, scale=&#39;utc&#39;) print(ad_date_astro) bc_date_astro = Time(&quot;-00400-01-01T01:23:45&quot;, format=&#39;fits&#39;, scale=&#39;utc&#39;) print(bc_date_astro) dates_astro = Time([&quot;-00400-01-01T01:23:45&quot;, &quot;2020-01-01T01:23:45&quot;], format=&#39;fits&#39;, scale=&#39;utc&#39;) print(dates_astro) print(dates_astro[0]) . . 2020-01-01T01:23:45.000 -00400-01-01T01:23:45.000 [&#39;-00400-01-01T01:23:45.000&#39; &#39;+02020-01-01T01:23:45.000&#39;] -00400-01-01T01:23:45.000 . /usr/local/anaconda3/lib/python3.8/site-packages/erfa/core.py:154: ErfaWarning: ERFA function &#34;dtf2d&#34; yielded 1 of &#34;dubious year (Note 6)&#34; warnings.warn(&#39;ERFA function &#34;{}&#34; yielded {}&#39;.format(func_name, wmsg), /usr/local/anaconda3/lib/python3.8/site-packages/erfa/core.py:154: ErfaWarning: ERFA function &#34;d2dtf&#34; yielded 1 of &#34;dubious year (Note 5)&#34; warnings.warn(&#39;ERFA function &#34;{}&#34; yielded {}&#39;.format(func_name, wmsg), . The above warning seems to be benign and from well within Astropy, nothing to do for us here. . Side note: You can get your time data in a different format by using .isot, .unix. Note that you can print time in formats that wouldn&#39;t support parsing it! . print(ad_date_astro.unix) print(bc_date_astro.fits) print(bc_date_astro.isot) # This line would fail with a ValueError: &quot;Input values did not match the format class isot&quot; #bc_date_2 = Time(bc_date.isot, format=&#39;isot&#39;, scale=&#39;utc&#39;) . . 1577841825.0 -00400-01-01T01:23:45.000 -400-01-01T01:23:45.000 . Astropy: Getters . The Time class doesn&#39;t have an easy way to extract common attributes such as year, month or seconds. It does, however, support strftime and provides an implementation based on Python&#39;s time.strftime. This means we can define our own utility functions to extract the relevant components and parse them into integers for later use. . Sadly, this doesn&#39;t work for BC dates since strftime internally assumes dates in the ISO format for some reason. . #Getters def extract_year(t): return int(t.strftime(&#39;%Y&#39;)) extract_year(ad_date_astro) # This errors with ValueError: year -400 is out of range #extract_year(bc_date_astro) . . 2020 . There is always the option of writing our own function to extract time components from the source string based on the FITS representation. We can cheat by detecting if the date is BC and then removing the leading -, only to add it back on to the year at the end. . Another limitation is that datetime.parse assumes 4 digits for a year with zero-padding, but FITS comes with 5. This means we chop off the leading year digit. This is fine since apparently Astropy can&#39;t handle dates before 4799 BC. . def get_time_component(time, comp): &quot;&quot;&quot; Extract a time component (year, month, day, hour, minute, seconds, microsecond) from Time. Parameters - time : Time Time to extract from comp: string time component to extract Returns - res : int32 extracted time component &quot;&quot;&quot; from datetime import datetime fits_rep = time.fits is_bc = False if fits_rep.startswith(&#39;-&#39;): is_bc = True fits_rep = fits_rep[1:] leading_year = None if fits_rep.find(&#39;-&#39;) &gt; 4: leading_year = fits_rep[0] fits_rep = fits_rep[1:] dt = datetime.strptime(fits_rep, &#39;%Y-%m-%dT%H:%M:%S.%f&#39;) if comp == &#39;y&#39;: year = dt.year if leading_year is not None: year += int(leading_year) * 10000 if is_bc: year *= -1 return year elif comp == &#39;m&#39;: return dt.month elif comp == &#39;d&#39;: return dt.day elif comp == &#39;h&#39;: return dt.hour elif comp == &#39;min&#39;: return dt.minute elif comp == &#39;s&#39;: return dt.second return None . . print(bc_date_astro.fits) print(get_time_component(bc_date_astro, &#39;y&#39;)) print(ad_date_astro.fits) print(get_time_component(ad_date_astro, &#39;d&#39;)) far_bc = Time(&quot;-04799-01-01T01:23:45&quot;, format=&#39;fits&#39;, scale=&#39;utc&#39;) print(get_time_component(far_bc, &#39;y&#39;)) . -00400-01-01T01:23:45.000 -400 2020-01-01T01:23:45.000 1 -4799 . Astropy: Time spans . Astropy comes with a TimeDelta class that supports all common time span operations, such as add/subtract and new instance creation. The most common constructors are from seconds or from datetime.timedelta. . delta_astro = ad_date_astro - bc_date_astro print(delta_astro.datetime) new_delta_astro = TimeDelta(123456789, format=&#39;sec&#39;) print(new_delta_astro.datetime) new_delta_astro = TimeDelta(timedelta(days=123456), format=&#39;datetime&#39;) print(new_delta_astro.datetime) print((delta_astro - new_delta_astro).datetime) print(ad_date_astro + new_delta_astro) . . Conclusion . Astropy&#39;s time module offers a lot more functionality than we need which makes its objects clunky and its API quite complex. This is offset by having the option to keep an array of datetimes in the Time object itself, same as with TimeDelta, which lets us manipulate them as we would with ndarrays. The downside is that this wouldn&#39;t work well with libraries such as Pandas. . Skyfield . TODO: Overview . Skyfield: Creating times BC/AD . # TODO . . Skyfield: Getters . # TODO . . Skyfield: Time spans . # TODO . . Conclusion . TODO . SpiceyPy . This is more of an honourable mention than anything else. SpiceyPy is a wrapper for the C-based SPICE toolkit, and it shows in it&#39;s usability and documentation. For a taste, check out this easy-to-follow tutorial full of kernel installs and C-style code. . It does come with time utilities, but I couldn&#39;t even figure out how to set them up, let alone use them, so maybe steer clear. .",
            "url": "https://wolololf.github.io/fast-blog/datascience/history/python/time/2022/01/11/bc_dates_in_python_part_2.html",
            "relUrl": "/datascience/history/python/time/2022/01/11/bc_dates_in_python_part_2.html",
            "date": " • Jan 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "BC dates in Python - Part 1 - Numpy/Pandas",
            "content": "The problem . A while ago, I was doing a small visualisation project on an ancient history topic, and as part of that, I needed to express dates and times around 400BC. Sounds simple enough, right? Python has a datetime module, just use that and we&#39;re golden. . Well, not so fast. The MINYEAR is 1AD, so we can&#39;t express BC dates like that. We&#39;ll need a different solution. . What are our requirements for a good solution? What functionality are we looking for? . Expressing BC as well as AD dates | Create from string and/or numeric parameters | Print time | Getters | Add/subtract time span and getting time deltas | Get time span delta | Lightweight objects | Useable in pandas? | . 1. Data science libraries . Numpy - datetime64 + timedelta64 . Numpy&#39;s datetime64 and timedelta64 extends Python&#39;s base datetime/timedelta from 32 to 64 bit and also adds some extra functionality. . import numpy as np . . Numpy: Creating times BC/AD . Both classes support a range of +/-2.9e11 years with a second precision which should be enough for most purposes. . # Example code for creating BC and AD times ad_date = np.datetime64(&quot;2020-01-02T03:04:05&quot;) print(ad_date) bc_date = np.datetime64(&quot;-00400-01-02T03:04:05&quot;) print(bc_date) . . 2020-01-02T03:04:05 -400-01-02T03:04:05 . Numpy: Getters . Numpy doesn&#39;t provide extraction functions out of the box, but we can roll our own based on the string representation (inspired by this stack overflow answer). . def dt2cal(dt): &quot;&quot;&quot; Convert datetime64 to a calendar array of year, month, day, hour, minute, seconds, microsecond. Parameters - dt : datetime64 datetime Returns - cal : int32 array (7) calendar array representing year, month, day, hour, minute, second, microsecond &quot;&quot;&quot; # allocate output out = np.empty(7, dtype=&quot;i4&quot;) # decompose calendar floors Y, M, D, h, m, s = [dt.astype(f&quot;M8[{x}]&quot;) for x in &quot;YMDhms&quot;] out[0] = Y.astype(int) + 1970 # Gregorian year out[1] = (M - Y) + 1 # month out[2] = (D - M).astype(int) + 1 # day out[3] = (dt - D).astype(&quot;m8[h]&quot;).astype(int) # hour out[4] = (dt - h).astype(&quot;m8[m]&quot;).astype(int) # minute out[5] = (dt - m).astype(&quot;m8[s]&quot;).astype(int) # second out[6] = (dt - s).astype(&quot;m8[us]&quot;).astype(int) # microsecond return out . . print(bc_date) cal = dt2cal(bc_date) cal . . -400-01-02T03:04:05 . array([-400, 1, 2, 3, 4, 5, 0], dtype=int32) . def dt2cal_columns(dt): &quot;&quot;&quot; Convert array of datetime64 to a calendar array of year, month, day, hour, minute, seconds, microsecond with these quantites indexed on the last axis. Parameters - dt : datetime64 array (...) numpy.ndarray of datetimes of arbitrary shape Returns - cal : int32 array (..., 7) calendar array with last axis representing year, month, day, hour, minute, second, microsecond &quot;&quot;&quot; # allocate output out = np.empty(dt.shape + (7,), dtype=&quot;i4&quot;) # decompose calendar floors Y, M, D, h, m, s = [dt.astype(f&quot;M8[{x}]&quot;) for x in &quot;YMDhms&quot;] out[..., 0] = Y.astype(int) + 1970 # Gregorian year out[..., 1] = (M - Y) + 1 # month out[..., 2] = (D - M).astype(int) + 1 # day out[..., 3] = (dt - D).astype(&quot;m8[h]&quot;).astype(int) # hour out[..., 4] = (dt - h).astype(&quot;m8[m]&quot;).astype(int) # minute out[..., 5] = (dt - m).astype(&quot;m8[s]&quot;).astype(int) # second out[..., 6] = (dt - s).astype(&quot;m8[us]&quot;).astype(int) # microsecond return out . . dates = np.array([bc_date, ad_date], dtype=&#39;datetime64&#39;) print(dates) cal_arr = dt2cal_columns(dates) cal_arr . . [&#39;-400-01-02T03:04:05&#39; &#39;2020-01-02T03:04:05&#39;] . array([[-400, 1, 2, 3, 4, 5, 0], [2020, 1, 2, 3, 4, 5, 0]], dtype=int32) . Numpy: Time spans . timedelta64 handles addition and subtraction as expected; the only thing worth calling out is the concept of time scale inherent in Numpy&#39;s time classes: To operate on two timedelta64 objects, they both need to have the same time scale, i.e. both need to have the [Y], [d], etc format. You can easily convert these using .astype(timedelta64[X]). . This also holds for printing: The first print in the code below prints as seconds, which isn&#39;t very useful, but you can cast it to a better time scale such as years for better readability. Similarly, you need to specify the time scale when creating a time delta from scratch. . delta = ad_date - bc_date print(delta) print(delta.astype(&quot;timedelta64[D]&quot;)) print(delta.astype(&quot;timedelta64[Y]&quot;)) new_delta = np.timedelta64(123, &#39;D&#39;) print(new_delta) print(delta - new_delta) print(ad_date + new_delta) . . 76367836800 seconds 883887 days 2420 years 123 days 76357209600 seconds 2020-05-04T03:04:05 . Conclusion . Numpy is a solid choice if all you need is to cover a large range of times. Creating and dealing with dates and time spans is fairly straightforward, and the objects are lean as can be. As we&#39;ve seen, we can compensate for the lack of easy extraction functions with our own workarounds, but it&#39;s not as efficient as if it was supported natively, and is prone to breaking as the language evolves. . Pandas . Pandas is the standard framework many data scientists use when dealing with large amounts of data. Its to_datetime method is a great way to convert columns of dates from strings to Pandas Timestamps which wrap Numpy&#39;s datetime64. . #Imports import pandas as pd . . df = pd.DataFrame({&#39;date&#39;: [&#39;1970-1-2 03:04:05&#39;, &#39;2020-6-7 08:09:10&#39;], &#39;value&#39;: [2, 3]}) df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;], format=&quot;%Y-%d-%m %H:%M:%S&quot;) df . . date value . 0 1970-02-01 03:04:05 | 2 | . 1 2020-07-06 08:09:10 | 3 | . Pandas: Creating times BC/AD . Since Pandas internally uses datetime64, we should just be able to use to_datetime on both BC and AD dates and we&#39;re all good to go, right? Wrong. While Pandas does use 64 bits to represent time, it does so at a precision of nanoseconds which severly limits the available date range as discussed here. . # This will result in an error: #date = pd.to_datetime(&#39;-400-01-02T03:04:05&#39;, format=&quot;%Y-%d-%m %H:%M:%S&quot;) . . If you try to parse a value before 1677AD, you&#39;ll get this error: . ValueError: time data &#39;-400-01-02T03:04:05&#39; does not match format &#39;%Y-%d-%m %H:%M:%S&#39; (match). . The error message is a bit misleading since the input format is just fine, the problem is that the date itself falls outside the supported range. So to_datetime is out. . What if we populated our data frames directly with datetime64? . df = pd.DataFrame({&#39;date&#39;: [np.datetime64(&#39;-400-01-02T03:04:05&#39;), np.datetime64(&#39;2020-06-07T08:09:10&#39;)], &#39;value&#39;: [2, 3]}) df . . date value . 0 -400-01-02T03:04:05 | 2 | . 1 2020-06-07T08:09:10 | 3 | . This works beautifully! Looks like we can get our BC dates into Pandas data frames after all. . So we can use datetime64 directly, we just don&#39;t have the convenience of assembling Timestamps straight from string column(s). Here&#39;s a utility function that converts datetime64-compatible strings and puts them back into the column. . def custom_to_datetime_from_date(df): df[&#39;date&#39;] = df.apply(lambda row: np.datetime64(row[&#39;date&#39;]), axis=1) return df . . test_df = pd.DataFrame({&#39;date&#39;: [&#39;-400-01-02T03:04:05&#39;, &#39;2020-06-07T08:09:10&#39;], &#39;value&#39;: [2, 3]}) print(test_df) test_df = custom_to_datetime_from_date(test_df) test_df . . date value 0 -400-01-02T03:04:05 2 1 2020-06-07T08:09:10 3 . date value . 0 -400-01-02T03:04:05 | 2 | . 1 2020-06-07T08:09:10 | 3 | . Another great use of to_datetime is its ability to assemble Timestamps from multiple colums, e.g. year, month, etc. Here&#39;s what a workaround for this could look like: . helper_df = pd.DataFrame({&#39;column_names&#39;: [&#39;month&#39;, &#39;day&#39;, &#39;hour&#39;, &#39;minute&#39;, &#39;second&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;date_args&#39;: [&#39;M&#39;, &#39;D&#39;, &#39;h&#39;, &#39;m&#39;, &#39;s&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;offsets&#39;: [1, 1, 0, 0, 0, 0, 0]}) print(helper_df) def row_to_date_from_time_columns(row): if not &#39;year&#39; in row: return None date = np.datetime64(row[&#39;year&#39;], &#39;Y&#39;) for idx, r in helper_df.iterrows(): name = r[&#39;column_names&#39;] if name in row: arg = r[&#39;date_args&#39;] date += np.timedelta64(row[name], arg) offset = r[&#39;offsets&#39;] if offset != 0: date -= np.timedelta64(offset, arg) return date def custom_to_datetime_from_time_columns(df, drop_source_columns=False): df[&#39;date&#39;] = df.apply(lambda row: row_to_date_from_time_columns(row), axis=1) if drop_source_columns: df = df.drop(helper_df[&#39;column_names&#39;], axis=1, errors=&#39;ignore&#39;) return df . . column_names date_args offsets 0 month M 1 1 day D 1 2 hour h 0 3 minute m 0 4 second s 0 5 ms ms 0 6 ns ns 0 . test_df = pd.DataFrame({&#39;year&#39;: [&#39;-400&#39;, &#39;2020&#39;], &#39;month&#39;: [&#39;01&#39;, &#39;02&#39;], &#39;day&#39;: [&#39;03&#39;, &#39;04&#39;], &#39;value&#39;: [2, 3]}) print(test_df) test_df = custom_to_datetime_from_time_columns(test_df, True) test_df . . year month day value 0 -400 01 03 2 1 2020 02 04 3 . year value date . 0 -400 | 2 | -400-01-03 | . 1 2020 | 3 | 2020-02-04 | . For efficiency&#39;s sake, I&#39;ve moved some of the arrays outside the function. You should further adjust this by removing the columns you don&#39;t need, but this should be a good starting point. . And finally, a combined version that converts the date column if it exists, or assembles time-related columns if it doesn&#39;t: . helper_df = pd.DataFrame({&#39;column_names&#39;: [&#39;month&#39;, &#39;day&#39;, &#39;hour&#39;, &#39;minute&#39;, &#39;second&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;date_args&#39;: [&#39;M&#39;, &#39;D&#39;, &#39;h&#39;, &#39;m&#39;, &#39;s&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;offsets&#39;: [1, 1, 0, 0, 0, 0, 0]}) def row_to_date(row): if &#39;date&#39; in row: return np.datetime64(row[&#39;date&#39;]) if not &#39;year&#39; in row: return None date = np.datetime64(row[&#39;year&#39;], &#39;Y&#39;) for idx, r in helper_df.iterrows(): name = r[&#39;column_names&#39;] if name in row: arg = r[&#39;date_args&#39;] date += np.timedelta64(row[name], arg) offset = r[&#39;offsets&#39;] if offset != 0: date -= np.timedelta64(offset, arg) return date def custom_to_datetime(df, drop_source_columns=False): df[&#39;date&#39;] = df.apply(lambda row: row_to_date(row), axis=1) if drop_source_columns: df = df.drop(helper_df[&#39;column_names&#39;], axis=1, errors=&#39;ignore&#39;) return df . . Great, so we&#39;ve worked around that limitation in Pandas! However, this still doesn&#39;t solve the Timestamp limitation in DatetimeIndex and PeriodIndex. . Since we can create columns of datetime64 from strings now, maybe we can use the origin parameter of datetime64 and turn them into dates based on the Julian calender? This would mean that we can get a datetime64 with origin 4713BC that counts days from that date. Sounds like a good solution? Can we trick Timestamp into accepting a valid datetime64 and have it not modify it? . julian_origin = np.datetime64(&#39;-4713-01-01T12:00:00&#39;) test_input = np.datetime64(&#39;-400-01-02&#39;) # This will error out with: # OutOfBoundsDatetime: 1574925 is Out of Bounds for origin=&#39;julian&#39; #pd.to_datetime((test_input - julian).astype(&#39;timedelta64[D]&#39;).astype(int), unit=&#39;D&#39;, origin=&#39;julian&#39;) . . Nope, doesn&#39;t work. There is simply no way to get Timestamp to extend its range, even if you pass in a Julian datetime64. Pandas takes that representation and converts it to datetime64[ns] which again only goes as far back as 1677AD. . Pandas gives you false hope by stating that you can provide a different origin to to_datetime like this: pd.to_datetime([1, 2, 3], unit=&quot;D&quot;, origin=pd.Timestamp(&quot;1960-01-01&quot;)). However, for that to work, the origin Timestamp needs to be valid in the first place. So we&#39;d need to create a BC Timestamp to use as an origin point to get BC Timestamps, which we can&#39;t do because BC Timestamps aren&#39;t valid. Great. I guess we just can&#39;t use DateTimeIndex. . Pandas: Getters . Timestamp and DatetimeIndex have a great selection of component getters (as described here. Sadly, we can&#39;t use any of them since we can&#39;t use Timestamp/DatetimeIndex... . The best we can do is use the getters defined above as a starting point and write per-component extractor utility that we can then apply to each row to get a new column. . def get_time_component(dt, comp): &quot;&quot;&quot; Extract a time component (year, month, day, hour, minute, seconds, microsecond) from datetime64. Parameters - dt : datetime64 datetime to extract from comp: string time component to extract Returns - res : int32 extracted time component &quot;&quot;&quot; arr = dt2cal(dt) idx = [&#39;y&#39;, &#39;m&#39;, &#39;d&#39;, &#39;h&#39;, &#39;min&#39;, &#39;s&#39;, &#39;ms&#39;].index(comp) if idx == -1: return None return arr[idx] . df = pd.DataFrame({&#39;date&#39;: [np.datetime64(&#39;-400-01-02T03:04:05&#39;), np.datetime64(&#39;2020-06-07T08:09:10&#39;)], &#39;value&#39;: [2, 3]}) df[&#39;year&#39;] = df.apply(lambda row: get_time_component(row[&#39;date&#39;], &#39;y&#39;), axis=1) df . date value year . 0 -400-01-02T03:04:05 | 2 | -400 | . 1 2020-06-07T08:09:10 | 3 | 2020 | . Pandas: Time spans . One would think that if you have a working column of datetime64 objects and try to apply timedelta64 operations to the whole column, it would work. However, Pandas helpfully attempts to convert the column to Timestamps before applying the operation, which of course fails since our data is outside the Timestamp limits. Instead, we have to apply operations row-by-row, not using the column shorthand. . (Again, note that type casts are required to make the datetime64 in second-format compatible with the timedelta64 which is in year-format due to its construction.) . test_df = pd.DataFrame({&#39;date&#39;: [&#39;-400-01-02T03:04:05&#39;, &#39;2020-06-07T08:09:10&#39;], &#39;value&#39;: [2, 3]}) test_df = custom_to_datetime(test_df) sub_ts = np.timedelta64(100, &#39;Y&#39;) # Pandas will attempt to convert the date column into a Timestamp and crashes as a result #test_df[&#39;date&#39;] -= sub_ts test_df[&#39;date&#39;] = df.apply(lambda row: row[&#39;date&#39;] - sub_ts.astype(&#39;m8[s]&#39;), axis=1) test_df . . Conclusion . You can make Pandas work with Numpy&#39;s 64-bit time classes, it just needs some workarounds and a careful approach to keep Pandas from accidentally attempting an automatic conversion. Pandas usually adds a lot of utility to extend Numpy&#39;s time handling, but since they&#39;re all tied into range-limited classes, we can&#39;t use most of them. . Some articles that discuss the advantages of Pandas&#39; time handling can be found here and here, just so you know what you&#39;re missing out on. .",
            "url": "https://wolololf.github.io/fast-blog/datascience/history/python/numpy/pandas/time/2021/12/23/bc_dates_in_python_part_1.html",
            "relUrl": "/datascience/history/python/numpy/pandas/time/2021/12/23/bc_dates_in_python_part_1.html",
            "date": " • Dec 23, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://wolololf.github.io/fast-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wolololf.github.io/fast-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, thanks for dropping by! . My name is Wolfgang. I’m a game developer by day, and an ancient history and linguistics enthusiast by night. . I’ve been dabbling in data science for a while, to analyse and visualise topics I was interested in. More recently, I’ve become interested in the use of AI/ML in those areas. I’m hoping that some of what I learnt on the way will be of use to you :-) .",
          "url": "https://wolololf.github.io/fast-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wolololf.github.io/fast-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}