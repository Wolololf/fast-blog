{
  
    
  
    
        "post1": {
            "title": "Xenophon's Anabasis",
            "content": "Historical context and synopsis . It&#39;s the year 401 BCE. It has only been three years since after nearly 30 years, the Peloponnesian War finally ended; Sparta, with the financial backing of Persia, had defeated the Athenian Empire. While Athens is slowly coming to terms with the new world order, an event at the other end of the Greek known world stirs up another war: Darius II, King of Kings, ruler of Persia, is dead. His son and heir, Artaxerxes II, is going to succeed him, but another son, Cyrus the Younger, is rising in rebellion and lays claim to the throne. . How does this matter to the Greeks? A powerful kingdom at their borders breaking out into internal dynastic disputes must surely be a good thing? Well, not quite. Cyrus is the governour of most of modern-day Turkey, and it is him that gave financial support to Sparta and its allies in their war against the Athenian Empire. And now he&#39;s calling in favours: 10,000 mercenaries from the Spartan alliance will march against the new Persian king alongside Cyrus, the usurper. . As they are amassing forces in Ephesus, a young nobleman by named of Xenophon, a pupil of Socrates, leaves his hometown of Athens to join the campaign. He is however not, as one might think, joining the army, but has instead been invited to come along and... observe, almost like a tourist on a safari. . After nearly half a year of preparations, skirmishes and a long trek towards Babylon, with not enough provisions and the desert heat giving the Greeks trouble, the two would-be rulers&#39; forces clash at Cunaxa near Babylon, likely at the end of November 401 BC. All seems to be going well for the Greeks until Cyrus the Younger himself is cut down in an unfortunate charge. Now mercenaries without a paymaster, far away from home in a strange place surrounded by enemies, the Greeks strike an uneasy truce with the Persians. . When the Greeks send an embassy of their most senior military officers to negotiate a safe retreat, they are betrayed by the Persians who cut them down to a man. Leaderless and certain that the next day will be their last, the Greek army is losing hope, but Xenophon the Tourist along with a few junior officers rallies them. New generals are elected, Xenophon among them. The next day, they leave behind everything but necessities and start the long way North, over the Caucasus Mountains, towards the Black Sea. The Persian armies are at their heels, they have no provisions except what they can get by force or diplomacy, and they are heading into uncharted territory with no guides. . This is the March of the Ten Thousand, or as Xenophon will later call it in his memoire, the &quot;Anabasis&quot; (&quot;Upland March&quot;). . Visualisation . When I first read the Anabasis, I was fascinated. It reads like an adventure novel, and it has everything: Inspiring leaders, military conflict, strange tribes and sights, and a daunting chalopen(&#39;https://raw.githubusercontent.com/Wolololf/fast-blog/master/_notebooks/resources/token.mapbox_token&#39;).read()lenge that seems impossible at the outset. And this is the part that bothered me a little: As a European, my geography of ancient Persia is foggy at best, so I had no clue how far they had to travel to get back home. So I put together a small visualisation project with a timeline of events and locations, based on an analysis by Iordanis K. Paradeisopoulos. . I hope you enjoy it! . TODO: JupyterLab doesn&#39;t seem to want to display the map correctly, so I will need to build it in Binder, convert to HTML and embed it as an iframe following the guides here and here... .",
            "url": "https://wolololf.github.io/fast-blog/datascience/history/python/2022/01/22/xenophon_anabasis.html",
            "relUrl": "/datascience/history/python/2022/01/22/xenophon_anabasis.html",
            "date": " • Jan 22, 2022"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "BC dates in Python - Part 1 - Numpy/Pandas",
            "content": "The problem . A while ago, I was doing a small visualisation project on an ancient history topic, and as part of that, I needed to express dates and times around 400BC. Sounds simple enough, right? Python has a datetime module, just use that and we&#39;re golden. . Well, not so fast. The MINYEAR is 1AD, so we can&#39;t express BC dates like that. We&#39;ll need a different solution. . What are our requirements for a good solution? What functionality are we looking for? . Expressing BC as well as AD dates | Create from string and/or numeric parameters | Print time | Getters | Add/subtract time span and getting time deltas | Get time span delta | Lightweight objects | Useable in pandas? | . 1. Data science libraries . Numpy - datetime64 + timedelta64 . Numpy&#39;s datetime64 and timedelta64 extends Python&#39;s base datetime/timedelta from 32 to 64 bit and also adds some extra functionality. . import numpy as np . . Numpy: Creating times BC/AD . Both classes support a range of +/-2.9e11 years with a second precision which should be enough for most purposes. . # Example code for creating BC and AD times ad_date = np.datetime64(&quot;2020-01-02T03:04:05&quot;) print(ad_date) bc_date = np.datetime64(&quot;-00400-01-02T03:04:05&quot;) print(bc_date) . . 2020-01-02T03:04:05 -400-01-02T03:04:05 . Numpy: Getters . Numpy doesn&#39;t provide extraction functions out of the box, but we can roll our own based on the string representation (inspired by this stack overflow answer). . def dt2cal(dt): &quot;&quot;&quot; Convert datetime64 to a calendar array of year, month, day, hour, minute, seconds, microsecond. Parameters - dt : datetime64 datetime Returns - cal : int32 array (7) calendar array representing year, month, day, hour, minute, second, microsecond &quot;&quot;&quot; # allocate output out = np.empty(7, dtype=&quot;i4&quot;) # decompose calendar floors Y, M, D, h, m, s = [dt.astype(f&quot;M8[{x}]&quot;) for x in &quot;YMDhms&quot;] out[0] = Y.astype(int) + 1970 # Gregorian year out[1] = (M - Y) + 1 # month out[2] = (D - M).astype(int) + 1 # day out[3] = (dt - D).astype(&quot;m8[h]&quot;).astype(int) # hour out[4] = (dt - h).astype(&quot;m8[m]&quot;).astype(int) # minute out[5] = (dt - m).astype(&quot;m8[s]&quot;).astype(int) # second out[6] = (dt - s).astype(&quot;m8[us]&quot;).astype(int) # microsecond return out . . print(bc_date) cal = dt2cal(bc_date) cal . . -400-01-02T03:04:05 . array([-400, 1, 2, 3, 4, 5, 0], dtype=int32) . def dt2cal_columns(dt): &quot;&quot;&quot; Convert array of datetime64 to a calendar array of year, month, day, hour, minute, seconds, microsecond with these quantites indexed on the last axis. Parameters - dt : datetime64 array (...) numpy.ndarray of datetimes of arbitrary shape Returns - cal : int32 array (..., 7) calendar array with last axis representing year, month, day, hour, minute, second, microsecond &quot;&quot;&quot; # allocate output out = np.empty(dt.shape + (7,), dtype=&quot;i4&quot;) # decompose calendar floors Y, M, D, h, m, s = [dt.astype(f&quot;M8[{x}]&quot;) for x in &quot;YMDhms&quot;] out[..., 0] = Y.astype(int) + 1970 # Gregorian year out[..., 1] = (M - Y) + 1 # month out[..., 2] = (D - M).astype(int) + 1 # day out[..., 3] = (dt - D).astype(&quot;m8[h]&quot;).astype(int) # hour out[..., 4] = (dt - h).astype(&quot;m8[m]&quot;).astype(int) # minute out[..., 5] = (dt - m).astype(&quot;m8[s]&quot;).astype(int) # second out[..., 6] = (dt - s).astype(&quot;m8[us]&quot;).astype(int) # microsecond return out . . dates = np.array([bc_date, ad_date], dtype=&#39;datetime64&#39;) print(dates) cal_arr = dt2cal_columns(dates) cal_arr . . [&#39;-400-01-02T03:04:05&#39; &#39;2020-01-02T03:04:05&#39;] . array([[-400, 1, 2, 3, 4, 5, 0], [2020, 1, 2, 3, 4, 5, 0]], dtype=int32) . Numpy: Time spans . timedelta64 handles addition and subtraction as expected; the only thing worth calling out is the concept of time scale inherent in Numpy&#39;s time classes: To operate on two timedelta64 objects, they both need to have the same time scale, i.e. both need to have the [Y], [d], etc format. You can easily convert these using .astype(timedelta64[X]). . This also holds for printing: The first print in the code below prints as seconds, which isn&#39;t very useful, but you can cast it to a better time scale such as years for better readability. Similarly, you need to specify the time scale when creating a time delta from scratch. . delta = ad_date - bc_date print(delta) print(delta.astype(&quot;timedelta64[D]&quot;)) print(delta.astype(&quot;timedelta64[Y]&quot;)) new_delta = np.timedelta64(123, &#39;D&#39;) print(new_delta) print(delta - new_delta) print(ad_date + new_delta) . . 76367836800 seconds 883887 days 2420 years 123 days 76357209600 seconds 2020-05-04T03:04:05 . Conclusion . Numpy is a solid choice if all you need is to cover a large range of times. Creating and dealing with dates and time spans is fairly straightforward, and the objects are lean as can be. As we&#39;ve seen, we can compensate for the lack of easy extraction functions with our own workarounds, but it&#39;s not as efficient as if it was supported natively, and is prone to breaking as the language evolves. . Pandas . Pandas is the standard framework many data scientists use when dealing with large amounts of data. Its to_datetime method is a great way to convert columns of dates from strings to Pandas Timestamps which wrap Numpy&#39;s datetime64. . #Imports import pandas as pd . . df = pd.DataFrame({&#39;date&#39;: [&#39;1970-1-2 03:04:05&#39;, &#39;2020-6-7 08:09:10&#39;], &#39;value&#39;: [2, 3]}) df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;], format=&quot;%Y-%d-%m %H:%M:%S&quot;) df . . date value . 0 1970-02-01 03:04:05 | 2 | . 1 2020-07-06 08:09:10 | 3 | . Pandas: Creating times BC/AD . Since Pandas internally uses datetime64, we should just be able to use to_datetime on both BC and AD dates and we&#39;re all good to go, right? Wrong. While Pandas does use 64 bits to represent time, it does so at a precision of nanoseconds which severly limits the available date range as discussed here. . # This will result in an error: #date = pd.to_datetime(&#39;-400-01-02T03:04:05&#39;, format=&quot;%Y-%d-%m %H:%M:%S&quot;) . . If you try to parse a value before 1677AD, you&#39;ll get this error: . ValueError: time data &#39;-400-01-02T03:04:05&#39; does not match format &#39;%Y-%d-%m %H:%M:%S&#39; (match). . The error message is a bit misleading since the input format is just fine, the problem is that the date itself falls outside the supported range. So to_datetime is out. . What if we populated our data frames directly with datetime64? . df = pd.DataFrame({&#39;date&#39;: [np.datetime64(&#39;-400-01-02T03:04:05&#39;), np.datetime64(&#39;2020-06-07T08:09:10&#39;)], &#39;value&#39;: [2, 3]}) df . . date value . 0 -400-01-02T03:04:05 | 2 | . 1 2020-06-07T08:09:10 | 3 | . This works beautifully! Looks like we can get our BC dates into Pandas data frames after all. . So we can use datetime64 directly, we just don&#39;t have the convenience of assembling Timestamps straight from string column(s). Here&#39;s a utility function that converts datetime64-compatible strings and puts them back into the column. . def custom_to_datetime_from_date(df): df[&#39;date&#39;] = df.apply(lambda row: np.datetime64(row[&#39;date&#39;]), axis=1) return df . . test_df = pd.DataFrame({&#39;date&#39;: [&#39;-400-01-02T03:04:05&#39;, &#39;2020-06-07T08:09:10&#39;], &#39;value&#39;: [2, 3]}) print(test_df) test_df = custom_to_datetime_from_date(test_df) test_df . . date value 0 -400-01-02T03:04:05 2 1 2020-06-07T08:09:10 3 . date value . 0 -400-01-02T03:04:05 | 2 | . 1 2020-06-07T08:09:10 | 3 | . Another great use of to_datetime is its ability to assemble Timestamps from multiple colums, e.g. year, month, etc. Here&#39;s what a workaround for this could look like: . helper_df = pd.DataFrame({&#39;column_names&#39;: [&#39;month&#39;, &#39;day&#39;, &#39;hour&#39;, &#39;minute&#39;, &#39;second&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;date_args&#39;: [&#39;M&#39;, &#39;D&#39;, &#39;h&#39;, &#39;m&#39;, &#39;s&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;offsets&#39;: [1, 1, 0, 0, 0, 0, 0]}) print(helper_df) def row_to_date_from_time_columns(row): if not &#39;year&#39; in row: return None date = np.datetime64(row[&#39;year&#39;], &#39;Y&#39;) for idx, r in helper_df.iterrows(): name = r[&#39;column_names&#39;] if name in row: arg = r[&#39;date_args&#39;] date += np.timedelta64(row[name], arg) offset = r[&#39;offsets&#39;] if offset != 0: date -= np.timedelta64(offset, arg) return date def custom_to_datetime_from_time_columns(df, drop_source_columns=False): df[&#39;date&#39;] = df.apply(lambda row: row_to_date_from_time_columns(row), axis=1) if drop_source_columns: df = df.drop(helper_df[&#39;column_names&#39;], axis=1, errors=&#39;ignore&#39;) return df . . column_names date_args offsets 0 month M 1 1 day D 1 2 hour h 0 3 minute m 0 4 second s 0 5 ms ms 0 6 ns ns 0 . test_df = pd.DataFrame({&#39;year&#39;: [&#39;-400&#39;, &#39;2020&#39;], &#39;month&#39;: [&#39;01&#39;, &#39;02&#39;], &#39;day&#39;: [&#39;03&#39;, &#39;04&#39;], &#39;value&#39;: [2, 3]}) print(test_df) test_df = custom_to_datetime_from_time_columns(test_df, True) test_df . . year month day value 0 -400 01 03 2 1 2020 02 04 3 . year value date . 0 -400 | 2 | -400-01-03 | . 1 2020 | 3 | 2020-02-04 | . For efficiency&#39;s sake, I&#39;ve moved some of the arrays outside the function. You should further adjust this by removing the columns you don&#39;t need, but this should be a good starting point. . And finally, a combined version that converts the date column if it exists, or assembles time-related columns if it doesn&#39;t: . helper_df = pd.DataFrame({&#39;column_names&#39;: [&#39;month&#39;, &#39;day&#39;, &#39;hour&#39;, &#39;minute&#39;, &#39;second&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;date_args&#39;: [&#39;M&#39;, &#39;D&#39;, &#39;h&#39;, &#39;m&#39;, &#39;s&#39;, &#39;ms&#39;, &#39;ns&#39;], &#39;offsets&#39;: [1, 1, 0, 0, 0, 0, 0]}) def row_to_date(row): if &#39;date&#39; in row: return np.datetime64(row[&#39;date&#39;]) if not &#39;year&#39; in row: return None date = np.datetime64(row[&#39;year&#39;], &#39;Y&#39;) for idx, r in helper_df.iterrows(): name = r[&#39;column_names&#39;] if name in row: arg = r[&#39;date_args&#39;] date += np.timedelta64(row[name], arg) offset = r[&#39;offsets&#39;] if offset != 0: date -= np.timedelta64(offset, arg) return date def custom_to_datetime(df, drop_source_columns=False): df[&#39;date&#39;] = df.apply(lambda row: row_to_date(row), axis=1) if drop_source_columns: df = df.drop(helper_df[&#39;column_names&#39;], axis=1, errors=&#39;ignore&#39;) return df . . Great, so we&#39;ve worked around that limitation in Pandas! However, this still doesn&#39;t solve the Timestamp limitation in DatetimeIndex and PeriodIndex. . Since we can create columns of datetime64 from strings now, maybe we can use the origin parameter of datetime64 and turn them into dates based on the Julian calender? This would mean that we can get a datetime64 with origin 4713BC that counts days from that date. Sounds like a good solution? Can we trick Timestamp into accepting a valid datetime64 and have it not modify it? . julian_origin = np.datetime64(&#39;-4713-01-01T12:00:00&#39;) test_input = np.datetime64(&#39;-400-01-02&#39;) # This will error out with: # OutOfBoundsDatetime: 1574925 is Out of Bounds for origin=&#39;julian&#39; #pd.to_datetime((test_input - julian).astype(&#39;timedelta64[D]&#39;).astype(int), unit=&#39;D&#39;, origin=&#39;julian&#39;) . . Nope, doesn&#39;t work. There is simply no way to get Timestamp to extend its range, even if you pass in a Julian datetime64. Pandas takes that representation and converts it to datetime64[ns] which again only goes as far back as 1677AD. . Pandas gives you false hope by stating that you can provide a different origin to to_datetime like this: pd.to_datetime([1, 2, 3], unit=&quot;D&quot;, origin=pd.Timestamp(&quot;1960-01-01&quot;)). However, for that to work, the origin Timestamp needs to be valid in the first place. So we&#39;d need to create a BC Timestamp to use as an origin point to get BC Timestamps, which we can&#39;t do because BC Timestamps aren&#39;t valid. Great. I guess we just can&#39;t use DateTimeIndex. . Pandas: Getters . Timestamp and DatetimeIndex have a great selection of component getters (as described here. Sadly, we can&#39;t use any of them since we can&#39;t use Timestamp/DatetimeIndex... . The best we can do is use the getters defined above as a starting point and write per-component extractor utility that we can then apply to each row to get a new column. . def get_time_component(dt, comp): &quot;&quot;&quot; Extract a time component (year, month, day, hour, minute, seconds, microsecond) from datetime64. Parameters - dt : datetime64 datetime to extract from comp: string time component to extract Returns - res : int32 extracted time component &quot;&quot;&quot; arr = dt2cal(dt) idx = [&#39;y&#39;, &#39;m&#39;, &#39;d&#39;, &#39;h&#39;, &#39;min&#39;, &#39;s&#39;, &#39;ms&#39;].index(comp) if idx == -1: return None return arr[idx] . df = pd.DataFrame({&#39;date&#39;: [np.datetime64(&#39;-400-01-02T03:04:05&#39;), np.datetime64(&#39;2020-06-07T08:09:10&#39;)], &#39;value&#39;: [2, 3]}) df[&#39;year&#39;] = df.apply(lambda row: get_time_component(row[&#39;date&#39;], &#39;y&#39;), axis=1) df . date value year . 0 -400-01-02T03:04:05 | 2 | -400 | . 1 2020-06-07T08:09:10 | 3 | 2020 | . Pandas: Time spans . One would think that if you have a working column of datetime64 objects and try to apply timedelta64 operations to the whole column, it would work. However, Pandas helpfully attempts to convert the column to Timestamps before applying the operation, which of course fails since our data is outside the Timestamp limits. Instead, we have to apply operations row-by-row, not using the column shorthand. . (Again, note that type casts are required to make the datetime64 in second-format compatible with the timedelta64 which is in year-format due to its construction.) . test_df = pd.DataFrame({&#39;date&#39;: [&#39;-400-01-02T03:04:05&#39;, &#39;2020-06-07T08:09:10&#39;], &#39;value&#39;: [2, 3]}) test_df = custom_to_datetime(test_df) sub_ts = np.timedelta64(100, &#39;Y&#39;) # Pandas will attempt to convert the date column into a Timestamp and crashes as a result #test_df[&#39;date&#39;] -= sub_ts test_df[&#39;date&#39;] = df.apply(lambda row: row[&#39;date&#39;] - sub_ts.astype(&#39;m8[s]&#39;), axis=1) test_df . . Conclusion . You can make Pandas work with Numpy&#39;s 64-bit time classes, it just needs some workarounds and a careful approach to keep Pandas from accidentally attempting an automatic conversion. Pandas usually adds a lot of utility to extend Numpy&#39;s time handling, but since they&#39;re all tied into range-limited classes, we can&#39;t use most of them. . Some articles that discuss the advantages of Pandas&#39; time handling can be found here and here, just so you know what you&#39;re missing out on. .",
            "url": "https://wolololf.github.io/fast-blog/datascience/history/python/numpy/pandas/time/2021/12/23/bc_dates_in_python_part_1.html",
            "relUrl": "/datascience/history/python/numpy/pandas/time/2021/12/23/bc_dates_in_python_part_1.html",
            "date": " • Dec 23, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://wolololf.github.io/fast-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wolololf.github.io/fast-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, thanks for dropping by! . My name is Wolfgang. I’m a game developer by day, and an ancient history and linguistics enthusiast by night. . I’ve been dabbling in data science for a while, to analyse and visualise topics I was interested in. More recently, I’ve become interested in the use of AI/ML in those areas. I’m hoping that some of what I learnt on the way will be of use to you :-) .",
          "url": "https://wolololf.github.io/fast-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wolololf.github.io/fast-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}